apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_1_8

def releaseFolder = new File(project.buildDir, 'flashview')
def distFolder = file('dist')

repositories {
    mavenCentral()
}

configurations {
    compileExternal
    compile.extendsFrom compileExternal
}

dependencies {
    compileExternal group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.60'
    compileExternal group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
    
    compile group: 'com.flash3388.flashlib', name: 'flashutil', version: '2.0.0-alpha.4'
    compile group: 'com.hierynomus', name: 'sshj', version: '0.27.0'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    archiveBaseName.set('flashview')
    archiveFileName.set("${archiveBaseName.get()}.${archiveExtension.get()}")
    destinationDirectory.set(project.buildDir)

    from {
        (configurations.compile - configurations.compileExternal).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': 'com.flash3388.flashview.Main'
        attributes 'Class-Path': configurations.compileExternal.collect {
            it.name
        }.join(' ')
    }
}

task copyJarIntoRelease(type: Copy) {
    from jar.archiveFile.get()
    into releaseFolder
}

task copyExternalDependenciesIntoRelease(type: Copy) {
    from configurations.compileExternal
    into releaseFolder
}

task deleteOriginalJar(type: Delete) {
    delete jar.archiveFile.get()
}

task copyDistribution(type: Copy) {
    from fileTree(distFolder)
    into releaseFolder
}

task buildDistribution {
    dependsOn copyJarIntoRelease, deleteOriginalJar
    dependsOn copyExternalDependenciesIntoRelease
    dependsOn copyDistribution
}

build.finalizedBy buildDistribution